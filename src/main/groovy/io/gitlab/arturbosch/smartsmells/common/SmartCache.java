package io.gitlab.arturbosch.smartsmells.common;

import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.ConcurrentHashMap;
import java.util.function.Supplier;

/**
 * Defines a generic cache.
 *
 * @author Artur
 */
public class SmartCache<K, V> {

	/**
	 * Internal representation of the cache.
	 */
	private final Map<K, V> cache = new ConcurrentHashMap<>();

	private final V defaultValue;

	public SmartCache() {
		this.defaultValue = null;
	}

	public SmartCache(V defaultValue) {
		this.defaultValue = defaultValue;
	}

	public void reset() {
		cache.clear();
	}

	public Optional<V> get(K key) {
		return Optional.ofNullable(cache.get(key));
	}

	public V getOrDefault(K key) {
		return cache.getOrDefault(key, defaultValue());
	}

	public void put(K key, V value) {
		Objects.requireNonNull(key, "Key must not be null!");
		Objects.requireNonNull(value, "Value must not be null!");
		cache.put(key, value);
	}

	public boolean hasKey(K key) {
		return key != null && cache.containsKey(key);
	}

	public boolean hasValue(V value) {
		return value != null && cache.containsValue(value);
	}

	public int size() {
		return cache.size();
	}

	/**
	 * The value which will be returned if the cache does not contain the requested key.
	 * 
	 * @return the default value
	 */
	public V defaultValue() {
		return defaultValue;
	}

	/**
	 * Internal representation of this cache.
	 *
	 * @return Internal representation of this cache
	 */
	Map<K, V> getInternalCache() {
		return cache;
	}

	/**
	 * Gets the Value of the given Key from the Cache or inserts the Value generated by the Supplier
	 * if none is present.
	 * 
	 * @param key the key to get the value for
	 * @param supplier the supplier of the value
	 * @return the value
	 */
	public V cache(K key, Supplier<V> supplier) {
		return get(key).orElseGet(() -> {
			V value = supplier.get();
			put(key, value);
			return value;
		});
	}

}
